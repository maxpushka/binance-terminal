module;
#include <string>

#include "nlohmann/json.hpp"
#include "rpp/subjects/publish_subject.hpp"

export module state;

import exchange;

export struct Trade {
  double price;
  double quantity;
  uint64_t timestamp;
};

template <class Event>
struct IState : IStreamHandler {
  ~IState() override = default;
  // get_subject returns the subject that emits Trade objects.
  // It's used by the UI to subscribe for updates.
  [[nodiscard]] virtual rpp::subjects::publish_subject<Event>&
  get_subject() const noexcept = 0;
};

export class TradeHandler final : public IState<Trade> {
public:
  [[nodiscard]] std::string stream_name() const noexcept override;
  void handle(const nlohmann::json& data) const override;

  [[nodiscard]] rpp::subjects::publish_subject<Trade>&
  get_subject() const noexcept override { return subject_; }

private:
  // Each instance owns its subject.
  mutable rpp::subjects::publish_subject<Trade> subject_;
};

export struct OrderBookUpdate {
  int64_t first_update_id;
  int64_t last_update_id;
  std::vector<std::vector<std::string>> bids;
  std::vector<std::vector<std::string>> asks;
  uint64_t timestamp;
};

export class OrderBookHandler final : public IState<OrderBookUpdate> {
public:
  [[nodiscard]] std::string stream_name() const noexcept override;
  void handle(const nlohmann::json& data) const override;

  [[nodiscard]] rpp::subjects::publish_subject<OrderBookUpdate>&
  get_subject() const noexcept override { return subject_; }

private:
  // Each instance owns its subject.
  mutable rpp::subjects::publish_subject<OrderBookUpdate> subject_;
};
