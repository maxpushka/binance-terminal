module;
#include <deque>
#include <string>

#include "boost/asio/awaitable.hpp"
#include "nlohmann/json.hpp"
#include "rpp/subjects/publish_subject.hpp"
#include "spdlog/spdlog.h"

export module state;

import exchange;

namespace state {
namespace subjects = rpp::subjects;

export struct Trade {
  std::chrono::system_clock::time_point event_time;
  std::string symbol;
  uint64_t trade_id;
  double price;
  double quantity;
  uint64_t first_trade_id;
  uint64_t last_trade_id;
  std::chrono::system_clock::time_point trade_time;
  bool is_buyer_market_maker;
};

template <typename Event>
struct IState : exchange::IStreamHandler {
  ~IState() override = default;
  // get_subject returns the subject that emits Trade objects.
  // It's used by the UI to subscribe for updates.
  [[nodiscard]] virtual subjects::publish_subject<Event>& get_subject()
      const noexcept = 0;
};

export class TradeHandler final : public IState<Trade> {
 public:
  std::string stream_name() const noexcept override { return "aggTrade"; }

  boost::asio::awaitable<void> handle(const nlohmann::json& data) override;

  subjects::publish_subject<Trade>& get_subject() const noexcept override {
    return subject_;
  }

 private:
  mutable subjects::publish_subject<Trade> subject_{};
};

export struct OrderBookUpdate {
  std::string symbol;
  uint64_t timestamp;
  int64_t first_update_id;
  int64_t last_update_id;
  std::vector<std::vector<std::string>> bids;
  std::vector<std::vector<std::string>> asks;
};

export struct OrderBookEntry {
  double price;
  double quantity;
};

export using OrderBookSide = std::map<double, OrderBookEntry>;

export struct OrderBook {
  OrderBookSide bids{};
  OrderBookSide asks{};
};

export class OrderBookHandler final : public IState<OrderBook> {
 public:
  explicit OrderBookHandler(exchange::WebSocketAPI& api) noexcept : api_{api} {}

  std::string stream_name() const noexcept override { return "depth@100ms"; }

  boost::asio::awaitable<void> handle(const nlohmann::json& data) override;

  subjects::publish_subject<OrderBook>& get_subject() const noexcept override {
    return subject_;
  }

 private:
  mutable subjects::publish_subject<OrderBook>
      subject_{};           // used to publish processed updates
  OrderBook order_book_{};  // local order book state
  exchange::WebSocketAPI& api_;

  // Buffer for incoming updates until we have applied the snapshot.
  mutable std::deque<OrderBookUpdate> buffered_updates_;
  // State flags and current update id.
  mutable bool initialized_ = false;
  mutable bool snapshot_requested_ = false;
  mutable int64_t current_update_id_ = 0;
  mutable int64_t first_event_U_ = 0;

  // Helper: apply a single update event to the order book.
  void apply_update(const OrderBookUpdate& update);
};
}  // namespace state
