module;
#include <atomic>
#include <shared_mutex>

#include "boost/asio.hpp"
#include "boost/asio/awaitable.hpp"
#include "boost/asio/ssl.hpp"
#include "boost/beast/ssl.hpp"
#include "boost/beast/websocket/ssl.hpp"
#include "boost/beast/websocket/stream.hpp"
#include "nlohmann/json.hpp"

export module exchange;

namespace asio = boost::asio;
namespace beast = boost::beast;
namespace websocket = beast::websocket;

namespace exchange {
class WebSocket {
 public:
  WebSocket(asio::io_context& ioc, const std::string& host,
            const std::string& port, const std::string& target);
  virtual ~WebSocket() = default;

  // Coroutine-based entry point.
  asio::awaitable<void> run();

 protected:
  // Wait until the connection is established.
  asio::awaitable<void> wait_for_connection() const;

  // Helper to send a JSON command message.
  asio::awaitable<void> send_json(const std::string& message);

  // Process each incoming message.
  virtual asio::awaitable<void> process_message(const std::string& message) = 0;

 private:
  std::string host_, port_, target_;
  asio::ssl::context ssl_ctx_;
  asio::ip::tcp::resolver resolver_;
  websocket::stream<beast::ssl_stream<asio::ip::tcp::socket>> ws_;
  std::atomic_bool connected_{false};

  asio::awaitable<void> establish_connection();
};

export struct OrderBookSnapshot {
  int64_t last_update_id;
  std::vector<std::array<std::string, 2>> bids;
  std::vector<std::array<std::string, 2>> asks;
};

export void from_json(const nlohmann::json& j, OrderBookSnapshot& obs);

export class WebSocketAPI final : public WebSocket {
 public:
  explicit WebSocketAPI(boost::asio::io_context& io_context);

  [[nodiscard]] asio::awaitable<OrderBookSnapshot> get_orderbook_snapshot(
      const std::string& market);

 protected:
  asio::awaitable<void> process_message(const std::string& message) override;

 private:
  std::atomic<int> next_request_id_{1};

  // Request handlers.
  std::unordered_map<int, std::function<void(const nlohmann::json&)>>
      request_handlers_;
  mutable std::shared_mutex request_handlers_mutex_;
};

/// Interface that all stream handlers must implement.
export struct IStreamHandler {
  virtual ~IStreamHandler() = default;
  /// Get the name of the stream this handler is responsible for.
  [[nodiscard]] virtual std::string stream_name() const noexcept = 0;
  /// Handle the data part of a combined stream event.
  [[nodiscard]] virtual asio::awaitable<void> handle(
      const nlohmann::json& data) = 0;
};

/// Self-sufficient Binance WebSocket client.
export class WebSocketStreams final : public WebSocket {
 public:
  explicit WebSocketStreams(asio::io_context& ioc);
  ~WebSocketStreams() override = default;

  /// Subscribe to a stream:
  /// - Registers the handler for the given stream.
  /// - Sends the SUBSCRIBE command.
  asio::awaitable<void> subscribe(const std::string& market,
                                  std::unique_ptr<IStreamHandler> handler);

  /// Unsubscribe from a stream:
  /// - Removes the handler for the given stream.
  /// - Sends the UNSUBSCRIBE command.
  asio::awaitable<void> unsubscribe(const std::string& stream);

  /// List active subscriptions.
  /// - Sends the LIST_SUBSCRIPTIONS command.
  /// - Returns a vector of subscribed stream names.
  asio::awaitable<std::vector<std::string>> list_subscriptions();

 protected:
  // Process each incoming message.
  asio::awaitable<void> process_message(const std::string& message) override;

 private:
  std::atomic<int> next_request_id_{1};

  // Stream handlers (hot path).
  std::unordered_map<std::string, std::unique_ptr<IStreamHandler>>
      stream_handlers_;
  mutable std::shared_mutex stream_handlers_mutex_;
  // Request handlers.
  std::unordered_map<int, std::function<void(const nlohmann::json&)>>
      request_handlers_;
  mutable std::shared_mutex request_handlers_mutex_;
};
}  // namespace exchange
