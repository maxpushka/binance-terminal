module;
#include <ftxui/dom/table.hpp>
#include <vector>

#include "ftxui/component/component.hpp"
#include "ftxui/component/component_base.hpp"
#include "rpp/subjects/publish_subject.hpp"

export module ui.component;

namespace component {
// Signal type used for triggering redraws.
export struct RedrawSignal {};

export class TableHeader : public ftxui::ComponentBase {
 public:
  using HeaderType = std::vector<std::string>;

  TableHeader(const rpp::subjects::publish_subject<HeaderType>& header_input,
              rpp::subjects::publish_subject<RedrawSignal>& output);

  void setColumnWidths(const std::vector<size_t>& new_widths);

  [[nodiscard]] const HeaderType& getHeaderRow() const { return header_row_; }

  virtual ftxui::Element RenderCell(const std::string& cell, size_t width,
                                    size_t /*index*/);

  ftxui::Element Render() override;

 protected:
  HeaderType header_row_;
  std::vector<size_t> col_widths_ = {10, 10, 10};
  rpp::subjects::publish_subject<RedrawSignal>& header_update_subject_;
};

class ITableBody : public ftxui::ComponentBase {
 public:
  [[nodiscard]] virtual std::vector<std::vector<std::string>> getRows()
      const = 0;
  virtual void setColumnWidths(const std::vector<size_t>& new_widths) = 0;
};

export template <typename Input, typename State>
class TableBody : public ITableBody {
 public:
  using RowType = std::vector<std::string>;

  TableBody(const rpp::subjects::publish_subject<Input>& event_input,
            rpp::subjects::publish_subject<RedrawSignal>& output)
      : update_subject_(output) {
    event_input.get_observable().subscribe([this](const Input& event) {
      ProcessEvent(event);
      update_subject_.get_observer().on_next(RedrawSignal{});
    });
  }

  virtual void ProcessEvent(const Input& event) = 0;

  [[nodiscard]] virtual RowType BuildRow(const State& event) const = 0;

  [[nodiscard]] virtual ftxui::Element RenderCell(const std::string& cell,
                                                  const size_t width,
                                                  const size_t col_index,
                                                  const State& event) const {
    using namespace ftxui;
    return text(cell) | size(WIDTH, EQUAL, static_cast<int>(width)) |
           color(Color::White);
  }

  std::vector<std::vector<std::string>> getRows() const override {
    std::lock_guard lock(mutex_);
    std::vector<std::vector<std::string>> rows;
    rows.reserve(events_.size());
    for (auto it = events_.rbegin(); it != events_.rend(); ++it) {
      rows.push_back(BuildRow(*it));
    }
    return rows;
  }

  void setColumnWidths(const std::vector<size_t>& new_widths) override {
    if (new_widths == col_widths_)
      return;  // to avoid infinite cycle of redraws
    col_widths_ = new_widths;
    update_subject_.get_observer().on_next(RedrawSignal{});
  }

  ftxui::Element Render() override {
    std::vector<std::vector<ftxui::Element>> rows_elements;
    std::lock_guard lock(mutex_);
    for (auto it = events_.rbegin(); it != events_.rend(); ++it) {
      const State& event = *it;
      RowType row = BuildRow(event);
      std::vector<ftxui::Element> cells;
      for (size_t i = 0; i < row.size(); ++i) {
        size_t width = i < col_widths_.size() ? col_widths_[i] : 10;
        cells.push_back(RenderCell(row[i], width, i, event));
      }
      rows_elements.push_back(cells);
    }
    ftxui::Table body_table(rows_elements);
    return body_table.Render() | ftxui::bgcolor(ftxui::Color::Black);
  }

 protected:
  mutable std::mutex mutex_;
  std::vector<State> events_;
  std::vector<size_t> col_widths_ = {10, 10, 10};
  rpp::subjects::publish_subject<RedrawSignal>& update_subject_;
};

export class ScrollableTable final : public ftxui::ComponentBase {
 public:
  ScrollableTable(std::shared_ptr<TableHeader> header,
                  std::shared_ptr<ITableBody> body,
                  rpp::subjects::publish_subject<RedrawSignal>& redraw_subject);

  ftxui::Element Render() override;

 private:
  void recalcColumnWidths() const;

  std::shared_ptr<TableHeader> header_component_;
  std::shared_ptr<ITableBody> body_component_;
  rpp::subjects::publish_subject<RedrawSignal>& redraw_subject_;
  ftxui::Component body_renderer_;
  ftxui::Component body_scroller_;
};

ftxui::Component Scroller(ftxui::Component child);
}  // namespace component
